# 代码生成
当用户输入"代码生成 [目标位置] [设计文档位置] [要生成的代码]"时，按照以下步骤执行：

1. 分析设计文档：
    1.1 根据是否指定代码生成：如果用户指定了 `[要生成的代码]`，则根据该指定内容分析设计文档，确保生成的代码与文档一致。
    1.2 自动推断代码生成：如果没有指定 `[要生成的代码]`，则根据设计文档自动推断需要生成的代码，并优先生成缺失的部分。
    1.3 优先级排序：如果设计文档有对代码生成顺序的优先级排序，则按照优先级生成代码。

2. 分析目录结构(使用tree 命令，一次性生成所有目录结构。一次性分析分析所有文件)：
    2.1 确认现有文件：分析目标位置已有的目录结构，识别目录中的所有文件（包括文件夹和文件路径），但不深入分析文件内容。
    2.2 识别未生成的文件：根据现有的目录结构，确认哪些文件已经生成，哪些文件尚未生成。这样可以避免对已经生成的代码进行重复分析。
    2.3 避免冗余分析：只需要确保文件的存在与否，而无需解析文件内容。利用文件名和路径来决定代码是否生成。

3. 分析当前代码并生成：
    3.1 检查未生成的代码：对照目录结构和设计文档，确认哪些代码文件尚未生成。优先生成缺失的文件，避免重复生成已存在的部分。
    3.2 增量生成代码：如果目标位置已有部分代码（如部分模块已实现），仅对尚未生成的部分进行补充，避免从头开始生成所有内容。
    3.3 完善现有代码：如果文件已存在且需要补充或完善，基于设计文档对现有代码进行更新和修改。

4. 进行单元测试：
    4.1 对生成的代码进行单元测试，确保每个模块和功能符合设计文档要求。
    4.2 如果存在测试失败，返回修复生成代码，重新进行测试。

5. 测试通过后，提交代码到Git仓库：
    5.1 使用适当的 Git 命令（如 `git commit` 和 `git push`），将生成的代码提交到 Git 仓库。
    5.2 确保提交消息清晰明确，说明生成的代码内容和目标。

6. 代码审查：
    6.1 提交后，进行代码审查，确保代码质量和设计符合团队的标准。
    6.2 在审查过程中，提供相关背景和设计文档，以便审查者更好地理解代码。

7. 审查通过后，合并代码到主分支：
    7.1 审查通过后，将代码合并到主分支，确保主分支保持最新、最稳定的版本。
    7.2 使用 Git 命令（如 `git merge`）完成合并。

8. 代码发布：
    8.1 合并代码后，进行代码发布，确保生成的代码成功部署到目标环境。
    8.2 发布后，验证代码是否正常运行，并确保部署过程没有问题。
